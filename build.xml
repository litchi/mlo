<project default="ws" basedir=".">
    <target name="help">
        <echo>Run [ant ws] to deploy to remote server</echo>
        <echo>Run [ant bb] to deploy to blackberry 10 simulator</echo>
        <echo>Run [ant run-unit-test] to run unit tests for javascript</echo>
        <echo>Run [ant clean] to clean target directory</echo>
    </target>
    <taskdef name="jslint"
        classname="com.googlecode.jslint4java.ant.JSLintTask"
        classpath="/usr/share/ant/lib/jslint4java-2.0.3.jar" />

    <property name = "build.src"           location = "."/>
    <property name = "build.target"        location = "../target"/>
    <property name = "build.target.code"   location = "../target/code"/>
    <property name = "build.target.output" location = "../target/output"/>
    <property name = "build.target.qa"     location = "../target/qa"/>
    <property name = "build.remote.ip"     value    = "172.16.177.134"/>

    <!-- QA related settings-->
    <property name = "qa.test.unit.runner.url"     value    = "${build.src}/js/spec/SpecRunner.html"/>
    <property name = "qa.jslint.report.xml"        value    = "${build.target.qa}/jslint/xml"/>
    <property name = "qa.jslint.report.html"       value    = "${build.target.qa}/jslint/html"/>
    <property name = "qa.jslint.report.template"   value    = "../tools/checkstyle-noframes-severity-sorted.xsl"/>


    <!-- Please notice that by using open we are using the default browser defined by current OS user-->
    <property name = "env.browser.executable"      value    = "open"/>

    <target name="init">
        <mkdir dir = "${build.target.code}"/>
        <mkdir dir = "${build.target.output}"/>
    </target>

    <target name="qa.init">
        <mkdir dir = "${qa.jslint.report.xml}"/>
        <mkdir dir = "${qa.jslint.report.html}"/>
    </target>

    <target name="pre.process.copy" depends="init">
        <loadfile property="actionbar.content" srcFile="${build.src}/elements/actionbar.html"/>
        <loadfile property="task.context.menu.content" srcFile="${build.src}/elements/task-context-menu.html"/>
        <loadfile property="meta.context.menu.content" srcFile="${build.src}/elements/meta-context-menu.html"/>
        <loadfile property="task.create.inputbox" srcFile="${build.src}/elements/create-task-input.html"/>
        <loadfile property="meta.fields" srcFile="${build.src}/elements/meta-fields.html"/>
        <copy todir="${build.target.code}" encoding="UTF-8" outputencoding="UTF-8">
            <fileset dir="${build.src}">
                <exclude name = "**/*.swp"/>
                <exclude name = ".git"/>
                <exclude name = "**/*.bak"/>
                <exclude name = "build.xml"/>
                <exclude name = ".idea/**/*.*"/>
                <exclude name = "**/*.html"/>
                <exclude name = "elements"/>

                <!--Exclude jasmine libs for unit testing-->
                <exclude name = "js/libs/jasmine-1.3.1"/>
                <exclude name = "js/libs/jasmine-1.3.1/*.*"/>

                <!--Exclude testing specs-->
                <exclude name = "js/spec"/>
                <exclude name = "js/spec/*.*"/>
            </fileset>
        </copy>

        <!-- HTML files are always copied since the markups in those files needs to be replaced by element fragments everytime -->
        <copy todir="${build.target.code}" encoding="UTF-8" outputencoding="UTF-8" verbose="false" granularity="1" overwrite="true">
            <fileset dir="${build.src}">
                <exclude name = "elements"/>
                <exclude name = "elements/*.html"/>
                <include name = "**/*.html"/>
            </fileset>
            <!--Replace all @xxx@ mark to elements-->
            <filterset begintoken="@" endtoken="@">
                <filter token = "actionbar"            value = "${actionbar.content}"/>
                <filter token = "task-context-menu"    value = "${task.context.menu.content}"/>
                <filter token = "meta-context-menu"    value = "${meta.context.menu.content}"/>
                <filter token = "task-create-inputbox" value = "${task.create.inputbox}"/>
                <filter token = "meta-fields"          value = "${meta.fields}"/>
            </filterset>
        </copy>
    </target>

    <target name="qa.jslint.check" depends="qa.init, pre.process.copy">
        <jslint failureProperty="false" haltOnFailure="false">
            <formatter type="checkstyle" destfile="${qa.jslint.report.xml}/result.xml"/>
            <fileset dir="${build.target.code}">
                <include name="**/*.js"/>
                <exclude name="js/lib/**/*.*"/>
            </fileset>
        </jslint>
    </target>       

    <target name="qa.jslint.report" depends="qa.jslint.check">    
        <xslt in="${qa.jslint.report.xml}/result.xml" out="${qa.jslint.report.html}/jslint.html" style="${qa.jslint.report.template}"/>    
        <exec executable="${env.browser.executable}" spawn="yes"> 
            <arg value="${qa.jslint.report.html}/jslint.html"/> 
        </exec> 
    </target>  

    <target name="qa.test.unit" depends="pre.process.copy">
        <exec executable="${env.browser.executable}" spawn="yes"> 
            <arg value="${qa.test.unit.runner.url}"/> 
        </exec> 
    </target>

    <target name="ws" depends="pre.process.copy">
        <scp todir="root:password@${build.remote.ip}:/var/www/gtd">
            <fileset dir="${build.target.code}" excludes="**/*.swp,.git,**/*.bak,.DS_Store"/>
        </scp>                 
    </target>

    <target name="bb" depends="pre.process.copy">
        <exec executable="/bin/sh" dir="${build.target}">
            <arg line='-c "bb_launch.sh code"'/>
        </exec>
    </target>

    <target name="clean">
        <delete dir="${build.target}"/>
    </target>

    <target name="qa.clean">
        <delete dir="${build.target}"/>
    </target>

</project>
