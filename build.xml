<project default="ws" basedir=".">
    <target name="help">
        <echo>ant ws                             to deploy to remote server for ripple</echo>
        <echo>ant package                        to build bar package for simulator and device</echo>
        <echo>ant bb                             to deploy to blackberry 10 simulator</echo>
        <echo>ant qa.jslint.run                  to run jslint scan and generate report in xml format</echo>
        <echo>ant qa.jslint.report               to run jslint scan and generate report in html format</echo>
        <echo>ant qa.test.coverage.report.dev    to run unit test and generate report in html format</echo>
        <echo>ant qa.test.report.dev             to run unit test and generate report in html format</echo>
        <echo>ant qa.test.report.ci              to run unit test and generate report in html format on CI server</echo>
        <echo>ant qa.clean                       to clean qa target directory</echo>
        <echo>ant clean                          to clean target directory</echo>
    </target>

    <property name = "build.app.name"                       value = "BB10GTD"/>
    <property name = "build.src"                         location = "./main/src"/>
    <property name = "build.tools"                       location = "./tools"/>
    <property name = "build.test"                        location = "./test"/>

    <property name = "build.target"                      location = "./target"/>
    <property name = "build.target.code"                 location = "${build.target}/src"/>
    <property name = "build.target.output"               location = "${build.target}/output"/>
    <property name = "build.target.release"              location = "${build.target}/release"/>
    <property name = "build.target.output.src.zip"       location = "${build.target.output}/${build.app.name}.zip"/>

    <property name = "build.target.output.device"        location = "${build.target}/output/device"/>
    <property name = "build.target.output.device.bar"    location = "${build.target.output.device}/${build.app.name}.bar"/>

    <property name = "build.target.output.simulator"     location = "${build.target}/output/simulator"/>
    <property name = "build.target.output.simulator.bar" location = "${build.target.output.simulator}/${build.app.name}.bar"/>

    <property name = "env.webworks.installation.dir"  location = "/Users/larry/bin/WebWorks_SDK"/>
    <property name = "env.ripple.remote.user"         value    = "xqliu"/>
    <property name = "env.ripple.remote.password"     value    = "password"/>
    <property name = "env.ripple.remote.ip"           value    = "172.16.177.139"/>
    <property name = "env.ripple.remote.folder"       value    = "/www/gtd"/>
    <property name = "env.bb10.simulator.ip"          value    = "172.16.177.138"/>
    <!--<property name = "env.bb10.device.ip"             value    = "192.168.11.6"/>-->
    <property name = "env.bb10.device.ip"             value    = "192.168.50.72"/>
    <!--
       -<property name = "env.bb10.device.ip"             value    = "192.168.51.39"/>
       -<property name = "env.bb10.device.ip"             value    = "172.20.10.14"/>
    -->
    <property name = "env.bb10.device.password"       value    = "hetaolxq"/>
 
    <!-- Tools -->
    <property name = "tools.jslint.installation"           location = "${build.tools}/jslint"/>
    <property name = "tools.jslint.report.template"        location = "${tools.jslint.installation}/checkstyle-noframes-severity-sorted.xsl"/>
    <property name = "tools.jslint.taskdef.classpath"      location = "${tools.jslint.installation}/jslint4java.jar"/>

    <property name = "tools.JsTestDriver.installation"     location = "${build.tools}/JsTestDriver"/>
    <property name = "tools.dev.JsTestDriver.executable"   location = "${tools.JsTestDriver.installation}/runJsTestDriver.sh"/>
    <property name = "tools.ci.JsTestDriver.executable"    location = "${tools.JsTestDriver.installation}/runJsTestDriver.sh"/>

    <!--jgenhtml is used to generate local unit test code coverage report-->
    <!--For Bamboo in the CI server, Sonar is used-->
    <property name = "tools.jgenhtml.installation"         location = "${build.tools}/jgenhtml"/>
    <property name = "tools.jgenhtml.taskdef.classpath"    location = "${tools.jgenhtml.installation}/jgenhtml.jar"/>

    <!-- QA related settings-->
    <property name = "qa.build.target"                     location = "${build.target}/qa"/>

    <property name = "qa.jslint"                           location = "${build.test}/jslint"/>
    <property name = "qa.jslint.target"                    location = "${qa.build.target}/jslint"/>
    <property name = "qa.jslint.target.report"             location = "${qa.jslint.target}/report"/>
    <property name = "qa.jslint.target.report.xml"         location = "${qa.jslint.target.report}/xml"/>
    <property name = "qa.jslint.target.report.html"        location = "${qa.jslint.target.report}/html"/>

    <property name = "qa.JsTestDriver"                     location = "${build.test}/JsTestDriver"/>
    <property name = "qa.JsTestDriver.testcase.src"        location = "${qa.JsTestDriver}/src"/>

    <property name = "qa.JsTestDriver.target"              location = "${qa.build.target}/JsTestDriver"/>
    <property name = "qa.JsTestDriver.target.testcase.src" location = "${qa.JsTestDriver.target}/src"/>
    <property name = "qa.JsTestDriver.target.report"       location = "${qa.JsTestDriver.target}/report"/>
    <property name = "qa.JsTestDriver.target.report.xml"   location = "${qa.JsTestDriver.target.report}/xml"/>
    <property name = "qa.JsTestDriver.target.report.html"  location = "${qa.JsTestDriver.target.report}/html"/>

    <property name = "qa.coverage.target"                  location = "${qa.build.target}/coverage"/>
    <property name = "qa.coverage.target.report"           location = "${qa.coverage.target}/report"/>
    <property name = "qa.coverage.target.report.dat"       location = "${qa.coverage.target.report}/dat"/>
    <property name = "qa.coverage.target.report.html"      location = "${qa.coverage.target.report}/html"/>

    <property name = "release.password"  value = "hetaolxq"/>

    <!-- Please notice that by using open we are using the default browser defined by current OS user-->
    <property name = "env.ci.browser.executable"  value = "C:/opt/Google/Chrome/Application/chrome.exe"/>
    <property name = "env.dev.browser.executable" value = "open"/>

    <taskdef name="jslint" classname="com.googlecode.jslint4java.ant.JSLintTask" classpath="${tools.jslint.taskdef.classpath}"/>
    <taskdef name="jgenhtml" classname="com.googlecode.jgenhtml.ant.JGenHtmlTask" classpath="${tools.jgenhtml.taskdef.classpath}"/>

    <target name="init">
        <mkdir dir = "${build.target.code}"/>
        <mkdir dir = "${build.target.output}"/>
        <mkdir dir = "${build.target.release}"/>
    </target>

    <target name="qa.init">
        <mkdir dir = "${qa.jslint.target.report.xml}"/>
        <mkdir dir = "${qa.jslint.target.report.html}"/>
        <mkdir dir = "${qa.JsTestDriver.target.testcase.src}"/>
        <mkdir dir = "${qa.JsTestDriver.target.report.xml}"/>
        <mkdir dir = "${qa.JsTestDriver.target.report.html}"/>
        <mkdir dir = "${qa.coverage.target.report.dat}"/>
        <mkdir dir = "${qa.coverage.target.report.html}"/>
    </target>

    <target name="file-checks">
        <available file = "${build.src}/elements/actionbar.html"         property = "actionbar.file.found"/>
        <available file = "${build.src}/elements/task-context-menu.html" property = "contextmenu.file.found"/>
        <available file = "${build.src}/elements/meta-fields.html"       property = "meta-fields.file.found"/>
    </target>

    <target name="pre.process.copy" depends="init, file-checks">
        <loadfile property="actionbar.content" srcFile="${build.src}/elements/actionbar.html"/>
        <loadfile property="task.context.menu.content" srcFile="${build.src}/elements/task-context-menu.html"/>
        <loadfile property="meta.fields" srcFile="${build.src}/elements/meta-fields.html"/>
        <copy todir="${build.target.code}" encoding="UTF-8" outputencoding="UTF-8">
            <fileset dir="${build.src}">
                <exclude name = "**/*.swp"/>
                <exclude name = ".git"/>
                <exclude name = "**/*.bak"/>
                <exclude name = "build.xml"/>
                <exclude name = ".idea/**/*.*"/>
                <exclude name = "**/*.html"/>
                <exclude name = "elements"/>
                <exclude name = "sonar-project.properties"/>
            </fileset>
        </copy>

        <!-- HTML files are always copied since the markups in those files needs to be replaced by element fragments everytime -->
        <copy todir="${build.target.code}" encoding="UTF-8" outputencoding="UTF-8" verbose="false" granularity="1" overwrite="true">
            <fileset dir="${build.src}">
                <exclude name = "elements"/>
                <exclude name = "elements/*.html"/>
                <include name = "**/*.html"/>
            </fileset>
            <!--Replace all @xxx@ mark to elements-->
            <filterset begintoken="@" endtoken="@">
                <filter token = "actionbar"            value = "${actionbar.content}"/>
                <filter token = "task-context-menu"    value = "${task.context.menu.content}"/>
                <filter token = "meta-fields"          value = "${meta.fields}"/>
            </filterset>
        </copy>
    </target>

    <target name="qa.jslint.run" depends="qa.init, pre.process.copy">
        <jslint failureProperty="false" haltOnFailure="false">
            <formatter type="checkstyle" destfile="${qa.jslint.target.report.xml}/result.xml"/>
            <fileset dir="${build.target.code}">
                <include name="**/*.js"/>
                <exclude name="js/lib/**/*.*"/>
            </fileset>
        </jslint>
    </target>       

    <target name="qa.jslint.report" depends="qa.jslint.run">    
        <xslt in="${qa.jslint.target.report.xml}/result.xml" out="${qa.jslint.target.report.html}/report.html" style="${tools.jslint.report.template}"/>    
        <exec executable="${env.dev.browser.executable}" spawn="yes"> 
            <arg value="${qa.jslint.target.report.html}/report.html"/> 
        </exec> 
    </target>  

    <target name="qa.test.internal.report" depends="qa.init, pre.process.copy">
        <!-- 1. Copy test cases to the target folder-->
        <copy todir="${qa.JsTestDriver.target.testcase.src}" encoding="UTF-8" outputencoding="UTF-8" verbose="true">
            <fileset dir="${qa.JsTestDriver.testcase.src}">
                <include name = "**/*.js"/>
            </fileset>
        </copy>
        <!-- 2. Run the test cases -->
        <exec executable="${executable}" dir="${tools.JsTestDriver.installation}" osfamily="${osfamily}">
            <arg value="${test.runner}" />
        </exec>
        <junitreport todir="${qa.JsTestDriver.target.report.html}">
            <fileset dir="${qa.JsTestDriver.target.report.xml}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${qa.JsTestDriver.target.report.html}"/>
        </junitreport>
    </target>

    <target name="qa.test.coverage.report.dev" depends="qa.init, pre.process.copy">
        <antcall target='qa.test.internal.report'>
            <param name='executable'   value='/bin/bash'/>
            <param name='osfamily'     value='unix'/>
            <param name='test.runner'  value="${tools.dev.JsTestDriver.executable}"/>
        </antcall>
        <exec executable="${env.dev.browser.executable}" spawn="yes"> 
            <arg value="${qa.JsTestDriver.target.report.html}/index.html"/> 
        </exec>
        <!-- 1. Copy the coverage result from ${qa.JsTestDriver.target.report.xml} to ${qa.coverage.target.report.dat} -->
        <copy todir="${qa.coverage.target.report.dat}" verbose="true">
            <fileset dir="${qa.JsTestDriver.target.report.xml}">
                <include name = "*.dat"/>
            </fileset>
        </copy> 
        <!-- 2. Generate html report using jgenhtml to ${qa.coverage.target.report.html} -->
        <jgenhtml in="${qa.JsTestDriver.target.report.xml}/jsTestDriver.conf-coverage.dat" outdir="${qa.coverage.target.report.html}"/>
    </target>

    <target name="qa.test.report.dev" depends="qa.init, pre.process.copy">
        <antcall target='qa.test.internal.report'>
            <param name='executable'   value='/bin/bash'/>
            <param name='osfamily'     value='unix'/>
            <param name='test.runner'  value="${tools.dev.JsTestDriver.executable}"/>
        </antcall>
        <exec executable="${env.dev.browser.executable}" spawn="yes"> 
            <arg value="${qa.JsTestDriver.target.report.html}/index.html"/> 
        </exec>
    </target>

    <target name="qa.test.report.ci" depends="qa.init, pre.process.copy">
        <copy file="${tools.JsTestDriver.installation}/runJsTestDriver.sh.server" tofile="${tools.JsTestDriver.installation}/runJsTestDriver.sh" verbose="true"/>
        <copy file="${tools.JsTestDriver.installation}/jsTestDriver.conf.server"   tofile="${tools.JsTestDriver.installation}/jsTestDriver.conf" verbose="true"/>
        <antcall target='qa.test.internal.report'>
            <param name='executable'   value='/bin/bash'/>
            <param name='osfamily'     value='unix'/>
            <param name='test.runner'  value="${tools.dev.JsTestDriver.executable}"/>
        </antcall>
    </target>

    <target name="ws" depends="pre.process.copy">
        <echo>Remote: ${env.ripple.remote.ip}, Source: ${build.target.code}, Remote folder: ${env.ripple.remote.folder}</echo>
        <!--
           -<scp todir="${env.ripple.remote.user}:${env.ripple.remote.password}@${env.ripple.remote.ip}:${env.ripple.remote.folder}" trust="true">
           -    <fileset dir="${build.target.code}" excludes="**/*.swp,.git,**/*.bak,.DS_Store"/>
           -</scp>                 
           -->
           <copy todir="/opt/nginx/html/gtd">
               <fileset dir="${build.target.code}" excludes="**/*.swp,.git,**/*.bak,.DS_Store"/>
           </copy>                 
    </target>

    <target name="package" depends="pre.process.copy">
        <!-- Create zip file -->
        <zip destfile="${build.target.output.src.zip}">
            <fileset dir="${build.target.code}">
                <exclude name = ".DS_Store"/>
                <exclude name = ".git"/>
            </fileset>
        </zip>

        <!-- Create package -->
        <exec executable="${env.webworks.installation.dir}/bbwp" dir="${build.target}">
            <arg line='${build.target.output.src.zip} -d -o ${build.target.output}'/>
        </exec>
    </target>

    <target name="release" depends="pre.process.copy">
        <!-- Create zip file -->
        <zip destfile="${build.target.output.src.zip}">
            <fileset dir="${build.target.code}">
                <exclude name = ".DS_Store"/>
                <exclude name = ".git"/>
            </fileset>
        </zip>

        <!-- Create package -->
        <!-- /blackberry-signer -register -csjpin hetaolxq -storepass client-RDK-1973952.csj client-PBDT-1973952.csj-->
        <exec executable="${env.webworks.installation.dir}/bbwp" dir="${build.target}">
            <arg line='${build.target.output.src.zip} -g ${release.password} -o ${build.target.release} --buildId 1'/>
        </exec>
    </target>

    <target name="ds" depends="package">
        <!-- Deploy to simulator-->
        <exec executable="${env.webworks.installation.dir}/dependencies/tools/bin/blackberry-deploy" dir="${build.target}">
            <arg line='-installApp -launchApp -device ${env.bb10.simulator.ip} "${build.target.output.simulator.bar}"'/>
        </exec>
    </target>

    <target name="dd" depends="package">
        <!-- Request token -->
        <!-- ./blackberry-debugtokenrequest -storepass hetaolxq -devicepin 24CB235E token_2013_03_25.bar -->
        <!-- blackberry-debugtokenrequest -storepass <KeystorePassword> -devicepin <device PIN> <debug_token_file_name.bar> -->
        <!-- Deploy debug token -->
        <!-- ./blackberry-deploy -installDebugToken token_2013_03_25.bar -device 192.168.11.6 -password hetaolxq -->
        <!-- Deploy to simulator-->
        <exec executable="${env.webworks.installation.dir}/dependencies/tools/bin/blackberry-deploy" dir="${build.target}">
            <arg line='-installApp -password ${env.bb10.device.password} -device ${env.bb10.device.ip} -package "${build.target.output.device.bar}"'/>
        </exec>
    </target>

    <target name="clean">
        <delete dir="${build.target}"/>
    </target>

    <target name="qa.clean">
        <delete dir="${qa.build.target}"/>
    </target>

</project>
